// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MES Core Tables (StackAuth provides user/team management)

// Departments (optionally scoped to a team)
model Department {
  id          String   @id @default(uuid())
  teamId      String   @map("team_id")
  name        String
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  routingOperations MESRoutingOperation[]

  @@map("departments")
}

// Routings: Define the production paths
model MESRouting {
  id          String   @id @default(uuid())
  teamId      String   @map("team_id")
  name        String
  description String?
  version     String   @default("1.0")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  operations MESRoutingOperation[]
  orders     MESOrder[]

  @@map("mes_routings")
}

// Routing Operations: Individual operations within a routing
model MESRoutingOperation {
  id              String   @id @default(uuid())
  routingId       String   @map("routing_id")
  departmentId    String?  @map("department_id")
  operationNumber Int      @map("operation_number")
  operationName   String   @map("operation_name")
  description     String?
  setupTime       Int?     @map("setup_time") // in minutes
  runTime         Int?     @map("run_time") // in minutes
  instructions    String?
  requiredSkills  Json?    @map("required_skills")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  teamId          String   @map("team_id")

  // Relations
  routing              MESRouting               @relation(fields: [routingId], references: [id], onDelete: Cascade)
  department           Department?              @relation(fields: [departmentId], references: [id])
  workOrderOperations  MESWorkOrderOperation[]

  @@map("mes_routing_operations")
}

// Orders: Production orders
model MESOrder {
  id                  String    @id @default(uuid())
  teamId              String    @map("team_id")
  orderNumber         String    @map("order_number")
  routingId           String    @map("routing_id")
  quantity            Int
  priority            Int       @default(1)
  status              String    @default("pending") // pending | in_progress | completed | cancelled
  scheduledStartDate  DateTime? @map("scheduled_start_date")
  scheduledEndDate    DateTime? @map("scheduled_end_date")
  actualStartDate     DateTime? @map("actual_start_date")
  actualEndDate       DateTime? @map("actual_end_date")
  notes               String?
  customFields        Json?     @map("custom_fields")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  routing              MESRouting               @relation(fields: [routingId], references: [id])
  workOrderOperations  MESWorkOrderOperation[]

  @@map("mes_orders")
}

// Work Order Operations (WOO): Individual work orders for each operation
model MESWorkOrderOperation {
  id                   String    @id @default(uuid())
  orderId              String    @map("order_id")
  routingOperationId   String    @map("routing_operation_id")
  operatorId           String?   @map("operator_id") // StackAuth user ID
  status               String    @default("pending") // pending | in_progress | completed | paused | cancelled | waiting
  scheduledStartTime   DateTime? @map("scheduled_start_time")
  scheduledEndTime     DateTime? @map("scheduled_end_time")
  actualStartTime      DateTime? @map("actual_start_time")
  actualEndTime        DateTime? @map("actual_end_time")
  quantityCompleted    Int       @default(0) @map("quantity_completed")
  quantityRejected     Int       @default(0) @map("quantity_rejected")
  capturedData         Json?     @map("captured_data")
  notes                String?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  teamId               String    @map("team_id")

  // Relations
  order            MESOrder             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  routingOperation MESRoutingOperation  @relation(fields: [routingOperationId], references: [id])
  pauseEvents      MESPauseEvent[]

  @@map("mes_work_order_operations")
}

// Pause Reasons: Standardized reasons for pausing operations
model MESPauseReason {
  id          String   @id @default(uuid())
  teamId      String   @map("team_id")
  name        String
  description String?
  category    String   // planned | unplanned | maintenance | quality | material | other
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  pauseEvents MESPauseEvent[]

  @@map("mes_pause_reasons")
}

// Pause Events: Track when operations are paused
model MESPauseEvent {
  id                     String    @id @default(uuid())
  workOrderOperationId   String    @map("work_order_operation_id")
  pauseReasonId          String    @map("pause_reason_id")
  startTime              DateTime  @map("start_time")
  endTime                DateTime? @map("end_time")
  notes                  String?
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  teamId                 String    @map("team_id")

  // Relations
  workOrderOperation MESWorkOrderOperation @relation(fields: [workOrderOperationId], references: [id], onDelete: Cascade)
  pauseReason        MESPauseReason        @relation(fields: [pauseReasonId], references: [id])

  @@map("mes_pause_events")
}

// API Authentication and Audit Models

// API Keys for external system authentication
model MESAPIKey {
  id           String   @id @default(uuid())
  teamId       String   @map("team_id")
  name         String   // Human-readable name for the API key
  description  String?  // Optional description
  keyHash      String   @unique @map("key_hash") // Hashed version of the API key
  keyPrefix    String   @map("key_prefix") // First 8 characters for identification
  permissions  Json     @default("{\"read\": true, \"write\": false, \"admin\": false}") // Permission object
  isActive     Boolean  @default(true) @map("is_active")
  expiresAt    DateTime? @map("expires_at") // Optional expiration date
  lastUsedAt   DateTime? @map("last_used_at")
  createdBy    String   @map("created_by") // StackAuth user ID who created the key
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  usageRecords MESAPIKeyUsage[]
  auditLogs    MESAuditLog[]

  @@map("mes_api_keys")
}

// API Key Usage tracking for rate limiting
model MESAPIKeyUsage {
  id         String   @id @default(uuid())
  apiKeyId   String   @map("api_key_id")
  teamId     String   @map("team_id")
  endpoint   String   // API endpoint called
  method     String   // HTTP method
  timestamp  DateTime @default(now())
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  statusCode Int      @map("status_code")
  responseTime Int    @map("response_time") // Response time in milliseconds

  // Relations
  apiKey MESAPIKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@index([apiKeyId, timestamp])
  @@index([teamId, timestamp])
  @@map("mes_api_key_usage")
}

// Audit logging for all API operations
model MESAuditLog {
  id            String   @id @default(uuid())
  teamId        String   @map("team_id")
  apiKeyId      String?  @map("api_key_id") // Null for internal operations
  userId        String?  @map("user_id") // StackAuth user ID for internal operations
  action        String   // Action performed (CREATE, UPDATE, DELETE, etc.)
  resource      String   // Resource type (order, routing, etc.)
  resourceId    String?  @map("resource_id") // ID of the resource affected
  endpoint      String?  // API endpoint for external calls
  method        String?  // HTTP method for external calls
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  requestData   Json?    @map("request_data") // Request payload (sanitized)
  responseData  Json?    @map("response_data") // Response data (sanitized)
  statusCode    Int?     @map("status_code")
  errorMessage  String?  @map("error_message")
  timestamp     DateTime @default(now())

  // Relations
  apiKey MESAPIKey? @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)

  @@index([teamId, timestamp])
  @@index([apiKeyId, timestamp])
  @@index([action, resource])
  @@map("mes_audit_logs")
}
